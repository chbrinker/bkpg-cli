#!/usr/bin/env bash

set -eo pipefail

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
readonly script_dir
script_name=$(basename "$0")
readonly script_name


BOSH_CENTRAL_BASE_URI=http://central.bosh.community


function main() {
    local verb=$1

    case ${verb} in
        -h)
            usage ; exit 0 ;;
        upload)
            shift
            upload_package "$@"
            ;;
        download)
            shift
            download_package "$@"
            ;;
        *)
            usage ; exit 2 ;;
    esac
}

function usage() {
    echo "Usage: ${script_name} <upload|download> <package-name>"
}

function upload_package() {
    local pkg_name=$1

    if [[ ! -d "./packages" ]]; then
        echo "ERROR: no './packages' subdirectory here. Check if you are in a BOSH Release directory. Aborting." >&2
        exit 2
    fi
    if [[ ! -d "./packages/${pkg_name}" ]]; then
        echo "ERROR: no such package: '${pkg_name}'. Aborting." >&2
        exit 2
    fi

    # set -x
    local pkg_metadata dep dep_metadata
    pkg_metadata=$(build_metadata "${pkg_name}")

    local old_IFS=$IFS
    IFS=$'\n'
        dependencies=($(yq -r ".dependencies[]" "packages/${pkg_name}/spec" | tr -d '\r'))
    IFS="${old_IFS}"

    # echo "DEBUG: dependencies:" "${dependencies[@]}"
    for dep in "${dependencies[@]}"; do
        if [[ ! -d "./packages/${dep}" ]]; then
            echo -e "ERROR: no such package dependecy: '${dep}'." \
                "Shouldn't you download it from BOSH-Central?" \
                "Aborting.\n" \
                "Hint: use \`bpkg dowload ${dep}\` for that." \
                 >&2
            exit 2
        fi

        dep_metadata=$(build_metadata "${dep}")

        # echo "DEBUG: dependecy '$dep' metadata: "
        # jq . <<< ${pkg_metadata}

        pkg_metadata=$(
            jq --argjson dep_metadata "[${dep_metadata}]" \
                '.dependencies += $dep_metadata' \
                <<< "${pkg_metadata}"
        )
    done

    # echo "DEBUG: final consolidated metadata: "
    # jq . <<< ${pkg_metadata}
    # exit

    local response_body
    response_body=$(
        curl -fsSL -X POST \
            -H "Content-Type: application/json" \
            "${BOSH_CENTRAL_BASE_URI}/package" \
            --data-raw "${pkg_metadata}"
    )

}

function build_metadata() {
    local pkg_name=$1

    local name dependencies files pkg_metadata

    pushd "packages/${pkg_name}" > /dev/null
        name=$(yq -r ".name" spec)
        # local old_IFS=$IFS
        # IFS=$'\n'
        #     dependencies=($(yq -r ".dependencies[]" spec | tr -d '\r'))
        #     files=($(yq -r ".files[]" spec | tr -d '\r'))
        # IFS="${old_IFS}"

        pkg_metadata=$(yq ".bpkg" spec)
    popd > /dev/null

    pkg_metadata=$(
        jq --arg name "${name}" \
            '.name = $name' <<< "${pkg_metadata}"
    )

    echo "${pkg_metadata}"
}

main "$@"
