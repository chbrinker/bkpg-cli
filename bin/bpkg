#!/usr/bin/env bash

set -eo pipefail

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
readonly script_dir
script_name=$(basename "$0")
readonly script_name


# BOSH_CENTRAL_BASE_URI=http://central.bosh.community
BOSH_CENTRAL_BASE_URI=http://bosh-central.cf.dev.eu-de-central.msh.host


function main() {
    local verb=$1

    case ${verb} in
        -h)
            usage ; exit 0 ;;
        upload)
            shift
            upload_package "$@"
            ;;
        download)
            shift
            download_package "$@"
            ;;
        *)
            usage ; exit 2 ;;
    esac
}

function usage() {
    echo "Usage: ${script_name} <upload|download> <package-name>"
}

function upload_package() {
    local pkg_name=$1

    if [[ ! -d "./packages" ]]; then
        echo "ERROR: no './packages' subdirectory here. Check if you are in a BOSH Release directory. Aborting." >&2
        exit 2
    fi
    if [[ ! -d "./packages/${pkg_name}" ]]; then
        echo "ERROR: no such package: '${pkg_name}'. Aborting." >&2
        exit 2
    fi

    upload_one_package "${pkg_name}"

    upload_direct_dependencies "${pkg_name}"

    echo "Success"
}

function upload_direct_dependencies() {
    local pkg_name=$1

    local old_IFS=$IFS
    IFS=$'\n'
        local dependencies
        dependencies=($(yq -r ".dependencies[]" "packages/${pkg_name}/spec" | tr -d '\r'))
    IFS="${old_IFS}"

    # echo "DEBUG: dependencies:" "${dependencies[@]}"
    for dep in "${dependencies[@]}"; do
        if [[ ! -d "./packages/${dep}" ]]; then
            echo -e "ERROR: no such package dependecy: '${dep}'." \
                "Shouldn't you download it from BOSH-Central?" \
                "Aborting.\n" \
                "Hint: use \`bpkg dowload ${dep}\` for that." \
                 >&2
            exit 2
        fi

        upload_one_package "${dep}"
    done
}

function upload_one_package() {
    local pkg_name=$1

    local pkg_metadata dep dep_metadata
    pkg_metadata=$(build_metadata "${pkg_name}")

    local old_IFS=$IFS
    IFS=$'\n'
        local dependencies files
        dependencies=($(yq -r ".dependencies[]" "packages/${pkg_name}/spec" | tr -d '\r'))
        files=($(yq -r ".files[]" "packages/${pkg_name}/spec" | tr -d '\r'))
    IFS="${old_IFS}"

    # echo "DEBUG: dependencies:" "${dependencies[@]}"
    for dep in "${dependencies[@]}"; do
        if [[ ! -d "./packages/${dep}" ]]; then
            echo -e "ERROR: no such package dependecy: '${dep}'." \
                "Shouldn't you download it from BOSH-Central?" \
                "Aborting.\n" \
                "Hint: use \`bpkg dowload ${dep}\` for that." \
                 >&2
            exit 2
        fi

        dep_metadata=$(build_metadata "${dep}")

        # echo "DEBUG: dependecy '$dep' metadata: "
        # jq . <<< ${pkg_metadata}

        pkg_metadata=$(
            jq --argjson dep_metadata "[${dep_metadata}]" \
                '.dependencies += $dep_metadata' \
                <<< "${pkg_metadata}"
        )
    done

    # echo "DEBUG: final consolidated metadata: "
    # jq . <<< ${pkg_metadata}
    # exit

    set -x
    local response_body
    response_body=$(
        curl -fsSL -X POST \
            -H "Content-Type: application/json" \
            "${BOSH_CENTRAL_BASE_URI}/package" \
            --data-raw "${pkg_metadata}"
    )
    set +x
 
    # Example payload:
    # { "urn": "urn:package:d8fa07cc-aecf-46da-af58-a726b44fd060" }
    local uuid
    uuid=$(
        jq -r '.urn' \
            <<< "${response_body}" \
            | sed -e 's/^.*:package:\(.*\)$/\1/'
        )

    # tar things here
    # get blobs from bosh director
    if [[ $(basename $PWD) != mongodb-compilation-boshrelease ]]; then
        bosh sync-blobs # > /dev/null
    fi

    local combined_paths
    combined_paths=("packages/${pkg_name}")
    local file
    for file in "${files[@]}"; do
        combined_paths+=($(find src blobs -type f -path "*/${file}" -print))
    done
    # echo "DEBUG: combined_paths:" "${combined_paths[@]}"

    mkdir -p ./tmp
    rm -f tmp/debug.tgz

    tar -czf tmp/debug.tgz "${combined_paths[@]}"
    set -x
    local created_object=$(
        curl -fsSL -X POST \
            "${BOSH_CENTRAL_BASE_URI}/bits/${uuid}" \
            -F "file=@tmp/debug.tgz"
    )
    set +x
    jq -n "${created_object}"
}

function build_metadata() {
    local pkg_name=$1

    local name dependencies files pkg_metadata

    pushd "packages/${pkg_name}" > /dev/null
        name=$(yq -r ".name" spec)
        # local old_IFS=$IFS
        # IFS=$'\n'
        #     dependencies=($(yq -r ".dependencies[]" spec | tr -d '\r'))
        #     files=($(yq -r ".files[]" spec | tr -d '\r'))
        # IFS="${old_IFS}"

        pkg_metadata=$(yq ".bpkg" spec)
    popd > /dev/null

    pkg_metadata=$(
        jq --arg name "${name}" \
            '.name = $name' <<< "${pkg_metadata}"
    )

    echo "${pkg_metadata}"
}

# Example search query:
#     bpkg search golang --version "1.10.*" --vendor "google" \
#         --sc-fam xenial --sc-version "97.*" --flavor "*"

# Example download query:
#     bpkg download golang --version "1.10.*" --vendor "google" \
#         --os "linux" --arch "amd64" \
#         --sc-family xenial --sc-version "97.*" --flavor "*"

function download_package() {
    local next_arg

    while [[ $# -gt 0 ]]; do
        next_arg=$1
        shift
        case $next_arg in
            --version)      version=$1 ; shift ;;
            --vendor)       vendor=$1 ; shift ;;
            --os)           os=$1 ; shift ;;
            --arch)         arch=$1 ; shift ;;
            --sc-family)    stemcellFamily=$1 ; shift ;;
            --sc-version)   sc_version=$1 ; shift ;;
            --flavor)       flavor=$1 ; shift ;;
            *)              packageName=$next_arg ;;
        esac
    done

    if [[ -z ${packageName} ]]; then
        usage
        exit 2
    fi

    local stemcellMajor stemcellMinor
    if [[ -n ${sc_version} ]]; then
        stemcellMajor=$(cut -d. -f1 <<< "${sc_version}")
        stemcellMinor=$(cut -d. -f2 <<< "${sc_version}")
    fi
    local query_string
    for var_name in version vendor os arch flavor packageName \
            stemcellFamily stemcellMajor stemcellMinor; do
        if [[ -z ${!var_name} ]]; then
            # omit empty values
            continue
        fi
        if [[ -n ${query_string} ]]; then
            query_string+="&"
        fi
        query_string+="${var_name}=${!var_name}"
    done

    set -x
    local response_body
    response_body=$(
        curl -fsSL -X GET \
            -H "Content-Type: application/json" \
            "${BOSH_CENTRAL_BASE_URI}/package?${query_string}"
    )
    jq -n "${response_body}"
    set +x

    if [[ $(jq -n "${response_body} | length") -eq 0 ]]; then
        echo "No such package '${name}' in BOSH Central repository." >&2
        exit 1
    fi

    # We only pick the first candidate
    local uuid
    uuid=$(jq -r ".[0].uuid" <<< "${response_body}")

    local old_IFS=$IFS
    IFS=$'\n'
        local tar_extracted_files
        tar_extracted_files=$(
            curl -fsSL -X GET \
                    "${BOSH_CENTRAL_BASE_URI}/bits/${uuid}" \
                | tar -zxvf - \
                | sed -ne 's/^x //p'
        )
    IFS="${old_IFS}"

    for file in "${tar_extracted_files[@]}"; do
        if [[ $file == blobs/* ]]; then
            bosh add-blob "${file}" "${file/#blobs\//}"
        fi
    done

    local new_IFS=$IFS
    IFS=$'\n'
        local dependencies files
        dependencies=($(yq -r ".dependencies[]" "packages/${packageName}/spec" | tr -d '\r'))
    IFS="${new_IFS}"

    # echo "DEBUG: dependencies:" "${dependencies[@]}"
    for dep in "${dependencies[@]}"; do
        if [[ ! -d "./packages/${dep}" ]]; then
            download_package ${dep}
        fi
    done

    echo "Success"
}

main "$@"
